AWSTemplateFormatVersion: 2010-09-09

Parameters:
    TableName:
        Type: String

Resources:
    DbCloudwatchMetrics:
        Type: AWS::DynamoDB::Table
        DeletionPolicy: Retain
        Properties:
            TableName: !Ref TableName
            BillingMode: PAY_PER_REQUEST
            AttributeDefinitions:
                -
                  AttributeName: namespace
                  AttributeType: S
                -
                  AttributeName: date
                  AttributeType: S
            KeySchema:
                -
                  AttributeName: namespace
                  KeyType: HASH
                -
                  AttributeName: date
                  KeyType: RANGE
            TimeToLiveSpecification:
                AttributeName: expire_at
                Enabled: true
            StreamSpecification:
                StreamViewType: NEW_AND_OLD_IMAGES

    CwMockRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Service:
                - lambda.amazonaws.com
              Action:
              - sts:AssumeRole
          Path: "/"
          Policies:
          - PolicyName: root
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - logs:*
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                - 'dynamodb:*'
                Resource: '*'

    CwStreamHandlerFunction:
        Type: AWS::Lambda::Function
        DependsOn: [ CwMockRole ]
        Properties:
            FunctionName: cloudwatch-stream-handler
            MemorySize: 128
            Handler: index.handler
            Role: !GetAtt CwMockRole.Arn
            Runtime: nodejs6.10
            Timeout: 300
            Environment:
                Variables:
                    table_name: !Sub "${TableName}"
            Code:
                ZipFile: >
                    var AWS = require('aws-sdk');
                    var dynamodb = new AWS.DynamoDB()

                    var increment_minute = function(rec,old_rec, cb ) {
                    		var expire_at = (Math.round(new Date().getTime() / 1000) + (60*60*24*15)).toString()
                    		var min_update = {
                    			"TableName": process.env.table_name,
                    			"Key": {
                    				namespace: rec.namespace,
                    				date: {S: 'M'+ rec.date.S.slice(1,18) },
                    			},
                    			"AttributeUpdates": {
                    				"expire_at": {
                    					"Action": "PUT",
                    					"Value": { N: expire_at  }, // expire in 15 days
                    				},
                    			},
                    		}
                    		Object.keys(rec).map(function( attr ) {
                    			if ( attr === 'expire_at') return;
                    			if ( rec[attr].hasOwnProperty('N') )
                    				min_update.AttributeUpdates[attr] = {
                    					"Action": "ADD",
                    					"Value": {N: old_rec === null ? rec[attr].N : (parseFloat(rec[attr].N) - parseFloat((old_rec[attr] || {}).N || 0)).toString()},  
                    				}
                    		})
                    		dynamodb.updateItem(min_update, function(err) {
                    			console.log(err ? '☐' : '☑', "increment M", err )
                    			cb(err)
                    		})
                    };

                    var increment_5minute = function(rec,old_rec, cb ) {
                    		var expire_at = (Math.round(new Date().getTime() / 1000) + (60*60*24*63)).toString()
                    		var timestamp = (rec.date.S.slice(2)+'.000Z').split(' ').join('T')
                    		var min_update = {
                    			"TableName": process.env.table_name,
                    			"Key": {
                    				namespace: rec.namespace,
                    				date: {S: '5M '+ (new Date(new Date(timestamp).getTime() - (new Date(timestamp).getTime() % (1000*60*5))).toISOString()).slice(0,16).split('T').join(' ') },
                    			},
                    			"AttributeUpdates": {
                    				"expire_at": {
                    					"Action": "PUT",
                    					"Value": { N: expire_at }, // expire in 63 days
                    				},
                    			},
                    		}
                    		Object.keys(rec).map(function( attr ) {
                    			if ( attr === 'expire_at') return;
                    			if ( rec[attr].hasOwnProperty('N') )
                    				min_update.AttributeUpdates[attr] = {
                    					"Action": "ADD",
                    					"Value": {N: old_rec === null ? rec[attr].N : (parseFloat(rec[attr].N) - parseFloat((old_rec[attr] || {}).N || 0)).toString()},
                    				}
                    		})
                    		dynamodb.updateItem(min_update, function(err) {
                    			console.log(err ? '☐' : '☑', "increment 5M", err )
                    			cb(err)
                    		})
                    };
                    
                    var increment_hour = function(rec,old_rec, cb ) {
                    		var expire_at = (Math.round(new Date().getTime() / 1000) + (60*60*24*455)).toString()
                    		var min_update = {
                    			"TableName": process.env.table_name,
                    			"Key": {
                    				namespace: rec.namespace,
                    				date: {S: 'H'+ rec.date.S.slice(1,15) },
                    			},
                    			"AttributeUpdates": {
                    				"expire_at": {
                    					"Action": "PUT",
                    					"Value": { N: expire_at  }, // expire in 455 days
                    				},
                    			},
                    		}
                    		Object.keys(rec).map(function( attr ) {
                    			if ( attr === 'expire_at') return;
                    			if ( rec[attr].hasOwnProperty('N') )
                    				min_update.AttributeUpdates[attr] = {
                    					"Action": "ADD",
                    					"Value": {N: old_rec === null ? rec[attr].N : (parseFloat(rec[attr].N) - parseFloat((old_rec[attr] || {}).N || 0)).toString()},
                    				}
                    		})
                    		dynamodb.updateItem(min_update, function(err) {
                    			console.log(err ? '☐' : '☑', "increment H", err )
                    			cb(err)
                    		})
                    };
                    
                    exports.handler = function(event, context) {
                    	var ev =      event.Records[0].eventName
                    	var rec =     (event.Records[0].dynamodb.NewImage || {})
                    	var old_rec = (event.Records[0].dynamodb.OldImage || {})

                    	if (((rec.date || {}).S || [])[0] !== 'S')
                    		return context.done();

                    	if ( ev === 'INSERT' ) {
                    		increment_minute(rec, null,function(err) {
                    			increment_5minute(rec,null, function(err) {
                    				increment_hour(rec,null, function(err) {
                    					context.done()
                    				})
                    			})
                    		})
                    		return;
                    	};

                    	if ( ev === 'MODIFY' ) {
                    		increment_minute(rec, old_rec,function(err) {
                    			increment_5minute(rec,old_rec, function(err) {
                    				increment_hour(rec,old_rec, function(err) {
                    					context.done()
                    				})
                    			})
                    		})
                    		return;
                    	};

                    	console.log(JSON.stringify(event,null,"\t"))
                    	context.done();
                    };

    SendersTableStream:
       Type: AWS::Lambda::EventSourceMapping
       Properties:
         BatchSize: 1
         EventSourceArn: !GetAtt DbCloudwatchMetrics.StreamArn
         FunctionName: !Ref CwStreamHandlerFunction
         StartingPosition: TRIM_HORIZON
